<?php
/**
 * PromotionItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Genba Digital Distribution API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PromotionItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromotionItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PromotionItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sku'                 => 'string',
        'currency_code'       => 'string',
        'discount_percentage' => 'double',
        "original_srp"        => 'double',
        "original_wsp"        => 'double',
        "discounted_srp"      => 'double',
        "discounted_wsp"      => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sku'                 => null,
        'currency_code'       => null,
        'discount_percentage' => 'double',
        "original_srp"        => 'double',
        "original_wsp"        => 'double',
        "discounted_srp"      => 'double',
        "discounted_wsp"      => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku'                 => 'Sku',
        'currency_code'       => 'CurrencyCode',
        'discount_percentage' => 'DiscountPercentage',
        'original_srp'        => 'OriginalSRP',
        'original_wsp'        => 'OriginalWSP',
        'discounted_srp'      => 'DiscountedSRP',
        'discounted_wsp'      => 'DiscountedWSP'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku'                 => 'setSku',
        'currency_code'       => 'setCurrencyCode',
        'discount_percentage' => 'setDiscountPercentage',
        "original_srp"        => 'setOriginalSRP',
        "original_wsp"        => 'setOriginalWSP',
        "discounted_srp"      => 'setDiscountedSRP',
        "discounted_wsp"      => 'setDiscountedWSP'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku'                 => 'getSku',
        'currency_code'       => 'getCurrencyCode',
        'discount_percentage' => 'getDiscountPercentage',
        "original_srp"        => 'getOriginalSRP',
        "original_wsp"        => 'getOriginalWSP',
        "discounted_srp"      => 'getDiscountedSRP',
        "discounted_wsp"      => 'getDiscountedWSP'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku']                 = isset($data['sku']) ? $data['sku'] : null;
        $this->container['currency_code']       = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['discount_percentage'] = isset($data['discount_percentage']) ? $data['discount_percentage'] : null;
        $this->container['original_srp']        = isset($data['original_srp']) ? $data['original_srp'] : null;
        $this->container['original_wsp']        = isset($data['original_wsp']) ? $data['original_wsp'] : null;
        $this->container['discounted_srp']      = isset($data['discounted_srp']) ? $data['discounted_srp'] : null;
        $this->container['discounted_wsp']      = isset($data['discounted_wsp']) ? $data['discounted_wsp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku SKU of the product
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Price currency (ISO 4217)
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return double
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param double $discount_percentage Percentage of product discount
     *
     * @return $this
     */
    public function setDiscountPercentage($discount_percentage)
    {
        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * @param $original_srp
     * @return mixed
     */
    public function getOriginalSRP($original_srp) {
        return $this->container['original_srp'];
    }

    /**
     * @param $original_srp
     * @return $this
     */
    public function setOriginalSRP($original_srp) {
        $this->container['original_srp'] = $original_srp;
        return $this;
    }

    /**
     * @param $original_wsp
     * @return mixed
     */
    public function getOriginalWSP($original_wsp) {
        return $this->container['original_wsp'];
    }

    /**
     * @param $original_wsp
     * @return $this
     */
    public function setOriginalWSP($original_wsp) {
        $this->container['original_wsp'] = $original_wsp;
        return $this;
    }

    /**
     * @param $discounted_srp
     * @return mixed
     */
    public function getDiscountedSRP($discounted_srp) {
        return $this->container['discounted_srp'];
    }

    /**
     * @param $discounted_srp
     * @return $this
     */
    public function setDiscountedSRP($discounted_srp) {
        $this->container['discounted_srp'] = $discounted_srp;
        return $this;
    }

    /**
     * @param $discounted_wsp
     * @return mixed
     */
    public function getDiscountedWSP($discounted_wsp) {
        return $this->container['discounted_wsp'];
    }

    /**
     * @param $discounted_wsp
     * @return $this
     */
    public function setDiscountedWSP($discounted_wsp) {
        $this->container['discounted_wsp'] = $discounted_wsp;
        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


